install.packages("adegenet")
library(adegenet)
install.packages("ggplot2")
install.packages("plyr")
install.packages("PopGenome")
library(PopGenome)
data <- readVCF("./Desktop/TotalRawSNPs.vcf")
data <- readVCF("./Desktop/TotalRawSNPs.vcf", 1)
data <- readVCF("./Desktop/TotalRawSNPs.vcf", frompos=1)
data <- readVCF("./Desktop/TotalRawSNPs.vcf", frompos=1, topos=100000)
GENOME.class=readVF()
GENOME.class=readVCF()
GENOME.class=readVCF("./Desktop/TotalRawSNPs.vcf", frompos=1, topos=100000)
GENOME.class=readVCF("./Desktop/TotalRawSNPs.vcf", 1000, frompos=1, topos=100000)
GENOME.class=readData("./Desktop/TotalRawSNPs.vcf", format="VCF")
GENOME.class<-readData("./Desktop", format="VCF")
GENOME.class<-readData("./Desktop", format="VCF", big.data = T)
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("VariantAnnotation")
library("boot", lib.loc="/usr/lib/R/library")
library("class", lib.loc="/usr/lib/R/library")
library("cluster", lib.loc="/usr/lib/R/library")
biocLite("BiocGenerics", "GenomicRanges". "GenomeInfoDb", "SummarizedExperiment", "Rsamtools")
biocLite("BiocGenerics", "GenomicRanges", "GenomeInfoDb", "SummarizedExperiment", "Rsamtools")
biocLite("BiocGenerics" "GenomicRanges" "GenomeInfoDb" "SummarizedExperiment" "Rsamtools")
install.packages("vcfR")
library(vcfR)
install.packages(c("ape", "curl", "devtools", "digest", "fields", "git2r", "httr", "irlba", "jsonlite", "maps", "mime", "openssl", "phangorn", "plyr", "R6", "RandomFields", "RandomFieldsUtils", "Rcpp", "RcppArmadillo", "rstudioapi", "sp", "spam", "stringi", "stringr", "withr"))
library(phangorn)
args(update.packages())
args(update.packages)
update.packages(checkBuilt = TRUE)
df <- data.frame(locusA=c("11","11","12","32"),
locusB=c(NA,"34","55","15"),locusC=c("22","22","21","22"))
row.names(df) <- .genlab("genotype",4)
df
df
libryar(adegenet)
library(adegenet)
obj[1]
df[1]
df[1:2]
library(provis)
shiny::runApp('Documents/GAMMA-master')
shiny::runApp('Documents/GAMMA')
runApp('Documents/GAMMA')
runApp('Documents/GAMMA')
runApp('Documents/GAMMA')
runApp('Documents/GAMMA')
runApp('Documents/GAMMA')
runApp('Documents/GAMMA')
runApp('Documents/GAMMA')
runApp('Documents/GAMMA')
runApp('Documents/GAMMA')
runApp('Documents/GAMMA')
setwd("~/Documents/GAMMA")
library(phytools)
tree <- read.nexus('data/anoleTree.nex')
data <- read.csv('data/anoleData.csv',row.names = 1)
setCharacter <-setNames(data$Simul4, row.names(data))
a<-NULL
simmap<-make.simmap(tree,setCharacter,nsim=100)
merged<-mergeMappedStates(simmap,c("b","c",'d'),"not-a")
density<-density(merged,method="densityMap",
states=c("not-a","a"))
plot(density,fsize=c(0.4,0.8),lwd=c(3,6))
density <- density(simmap)
names(density$hpd)
plot(density,transition=names(density$hpd)[1], cols=DisColPal[1])
DisColPal <- paletteer::paletteer_c("grDevices::Purple-Yellow", length(levels(setCharacter)))
DisCols <- setNames(DisColPal,levels(setCharacter))
plot(density,transition=names(density$hpd)[1], cols=DisColPal[1])
plot(density,transition=names(density$hpd)[1], cols=DisColPal[2])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
