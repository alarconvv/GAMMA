install.packages("corHMM")
library(shiny)
install.packages("ape")
install.packages("ape")
install.packages("ape")
install.packages("paletteer")
install.packages("coda")
install.packages("shiny")
install.packages("shiny")
install.packages("bslib")
#devtools::install_github(repo = 'https://github.com/liamrevell/phytools',force = TRUE)
library(phytools)
install.packages("phytools")
install.packages("shinyjs")
install.packages("rhandsontable")
install.packages("shinyWidgets")
install.packages("corHMM")
install.packages("corHMM")
library(shiny)
library(bslib)
library(ape)
library(paletteer)
library(coda)
library(corHMM)
#devtools::install_github(repo = 'https://github.com/liamrevell/phytools',force = TRUE)
library(phytools)
library(shinyjs)
library(rhandsontable)
library(shinyWidgets)
install.packages("devtools")
remove.packages(phytools)
remove.packages('phytools')
devtools::install_github(repo = 'https://github.com/liamrevell/phytools',force = TRUE)
#devtools::install_github(repo = 'https://github.com/liamrevell/phytools',force = TRUE)
library(phytools)
#devtools::install_github(repo = 'https://github.com/liamrevell/phytools',force = TRUE)
library(phytools)
#devtools::install_github(repo = 'https://github.com/liamrevell/phytools',force = TRUE)
library(phytools)
devtools::install_github(repo = 'https://github.com/liamrevell/phytools',force = TRUE)
library(shiny)
library(bslib)
library(ape)
library(paletteer)
library(coda)
library(corHMM)
#devtools::install_github(repo = 'https://github.com/liamrevell/phytools',force = TRUE)
library(phytools)
library(shinyjs)
library(rhandsontable)
library(shinyWidgets)
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
library(DDD)
dd_ML
runApp('Documents/Guane')
## read whale tree from file
whale.tree<-read.tree(file="Cetacea.phy")
## load phytools
library(phytools)
library(diversitree)
## load phytools
library(phytools)
## read whale tree from file
whale.tree<-read.tree(file="Cetacea.phy")
library(diversitree)
## load phytools
library(phytools)
## read whale tree from file
whale.tree<-read.tree(file="Cetacea.phy")
## read whale tree from file
whale.tree<-read.tree(file="Documents/Guane/data/Cetacea.phy")
bd_model<-make.bd(tree=whale.tree,
sampling.f=Ntip(whale.tree)/89)
st<-c(0.1,0.01)
bd_mle<-find.mle(func=bd_model,x.init=st)
bd_mle
make.yule
make.bd
shiny::runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
make.bd.t
make.bd
library(diversitree)
## load phytools
library(phytools)
shiny::runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
shiny::runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
shiny::runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
library(phytools)
library(diversitree)
set.seed(1)
tree <- read.newick('Documents/Guane/data/Cetacea.phy')
tree
## optimize model
dvar_mle<-find.mle(dvar_model, st,method="nlm")
dvar_model<-make.bd.t(tree,sampling.f=87/89,
functions=c("constant.t","exp.t"))
st<-c(0.1,0.01,0.01)
## optimize model
dvar_mle<-find.mle(dvar_model, st,method="nlm")
dvar_mle
## optimize model
dvar_mle<-find.mle(dvar_model, st,method="subplex")
dvar_mle
## optimize model
dvar_mle<-find.mle(dvar_model, st,method="nlminb")
dvar_mle
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('constant.t', 'constant.t'))
fityule <- find.mle(func = yule, x.init=c(0.1,0), method="subplex")
fityule
fityule <- find.mle(func = yule, x.init=c(0.01,0.01,0), method="subplex")
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('exp.t', 'constant.t'))
fityule <- find.mle(func = yule, x.init=c(0.01,0.01,0), method="subplex")
fityule
############# YULE #############
yule <-make.yule(tree = tree,sampling.f = 0.9,unresolved = NULL)
fityule <- find.mle(func = yule, x.init=0.1, method="optim")
<- find.mle(func = yule, x.init=0.1, method="optim")
fityule
############# YULE #############
yule <-make.bd(tree = tree,sampling.f = 0.9,unresolved = NULL)
fityule <- find.mle(func = yule, x.init=0.1, method="optim")
fityule <- find.mle(func = yule, x.init=c(0.1,0), method="optim")
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('exp.t', 'constant.t'))
fityule <- find.mle(func = yule, x.init=c(0.01,0), method="subplex")
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('linear.t', 'constant.t'))
fityule <- find.mle(func = yule, x.init=c(0.01,0.01,0), method="subplex")
yule
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('linear.t', 'constant.t'))
fityule <- find.mle(func = yule, x.init=c(0.01,0.01,0), method="subplex")
fityule
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('stepf.t', 'constant.t'))
fityule <- find.mle(func = yule, x.init=c(0.01,0.01,0.01,0.01,0), method="subplex")
fityule <- find.mle(func = yule, x.init=c(0.01,0.01,0), method="subplex")
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('spline.t', 'constant.t'))
library(phytools)
library(diversitree)
set.seed(1)
tree <- read.newick('Documents/Guane/data/Cetacea.phy')
tree
bd <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('constant.t', 'constant.t'))
fitbd <- find.mle(func = bd, x.init=c(0.1,0.01), method="subplex")
t<-seq(0,round(max(branching.times(phy = tree)),1),length.out=100)
b <- 0.1
b<-rep(b ,length(t))
d <- 0.01
d<-rep(d ,length(t))
plot(t,b,type="l",col="black",lwd=3,
ylim=c(0,max(b,d)*1.5),xlab="time",
ylab=expression('Lambda'))
lines(t,d,col="lightgrey",lwd=3)
mtext("a)",line=1,adj=0)
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c("constant.t","exp.t"))
fityule <- find.mle(func = yule, x.init=c(0.1,0.01,0.01), method="minqa")
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c("constant.t","stepf.t"))
fityule <- find.mle(func = yule, x.init=c(0.1,0.01,0.01,0.01), method="subplex")
fityule
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c("constant.t","spline.t"))
fityule <- find.mle(func = yule, x.init=c(0.1,0.01,0.01), method="subplex")
## Then, with a simple fit through this.
x <- seq(0, round(max(branching.times(phy = tree)),1), length.out=101)
x
y <- sin(x/t.max*2*pi)
y <- sin(x/round(max(branching.times(phy = tree)),1)*2*pi)
y
spline.data
spline.data <- list(t=x, y=y)
spline.data
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c("constant.t","spline.t"),spline.data = spline.data)
## Then, with a simple fit through this.
x <- seq(0, max(branching.times(phy = tree)), length.out=101)
y <- sin(x/max(branching.times(phy = tree))*2*pi)
spline.data <- list(t=x, y=y)
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c("constant.t","spline.t"),spline.data = spline.data)
fityule <- find.mle(func = yule, x.init=c(0.1,0.01,0.01), method="subplex")
yule
x
y <- sin(x/max(branching.times(phy = tree))*2*pi)
y
spline.data <- list(t=x, y=y)
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c("constant.t","spline.t"),spline.data = spline.data)
fityule <- find.mle(func = yule, x.init=c(0.1,0.01,0.01), method="subplex")
shiny::runApp('Documents/Guane')
runApp('Documents/Guane')
bd <-make.bd(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('constant.t', 'constant.t'))
bd <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('constant.t', 'constant.t'))
fitbd <- find.mle(func = bd, x.init=c(0.1,0.01), method="subplex")
fitbd
exp(-0.01*0.1)
t
t<-seq(0,round(max(branching.times(phy = tree)),1),length.out=100)
l=1
a=-0.05
b<-rep(3,length(t))
d<-l*exp(-a*t)
## plot curve
plot(t,b,type="l",col="black",lwd=3,ylim=c(0,5),
xlab="time",
ylab=expression(paste("rate (",lambda," or ",mu,")")))
lines(t,d,col="lightgrey",lwd=3)
mtext("c)",line=1,adj=0)
b<-rep(0,length(t))
b
spvar <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('exp.t', 'constant.t'))
fitexp <- find.mle(func = sp, x.init=c(0.01,0.01,0), method="subplex")
fitexp <- find.mle(func = spvar, x.init=c(0.01,0.01,0), method="subplex")
spvar <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('exp.t', 'constant.t'))
fitexp <- find.mle(func = spvar, x.init=c(0.01,0.01,0.1), method="subplex")
t<-seq(0,round(max(branching.times(phy = tree)),1),length.out=100)
l=0.01
a=-0.01
b<-l*exp(-a*t)
d<-rep(0.1,length(t))
## plot curve
plot(t,b,type="l",col="black",lwd=3,ylim=c(0,5),
xlab="time",
ylab=expression(paste("rate (",lambda," or ",mu,")")))
lines(t,d,col="lightgrey",lwd=3)
mtext("c)",line=1,adj=0)
plot(t,b,type="l",col="black",lwd=3,ylim=c(0,max(b,d)),
xlab="time",
ylab=expression(paste("rate (",lambda," or ",mu,")")))
lines(t,d,col="lightgrey",lwd=3)
mtext("c)",line=1,adj=0)
## Then, with a simple fit through this.
x <- seq(0, max(branching.times(phy = tree)), length.out=101)
x
## Then, with a simple fit through this.
x <- seq(0, max(branching.times(phy = tree)), length.out=5)
y <- sin(x/max(branching.times(phy = tree))*2*pi)
spline.data <- list(t=x, y=y)
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c("constant.t","spline.t"),spline.data = spline.data)
fityule <- find.mle(func = yule, x.init=c(0.1,0.01,0.01), method="subplex")
yule
set.seed(1)
tree <- read.newick('Documents/Guane/data/Cetacea.phy')
library(phytools)
library(diversitree)
set.seed(1)
tree <- read.newick('Documents/Guane/data/Cetacea.phy')
tree
spvar <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('stepf.t', 'constant.t'))
fitexp <- find.mle(func = spvar, x.init=c(0.01,0.01,1,0.1), method="minqa",control = list(optim.method= "newoua"))
fitexp
spvar <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('sigmoid.t', 'constant.t'))
fitexp <- find.mle(func = spvar, x.init=c(0.01,0.01,1,0.1,0.1), method="minqa",control = list(optim.method= "newoua"))
shiny::runApp('Documents/Guane')
runApp('Documents/Guane')
options(shiny.fullstacktrace = T)
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
shiny::runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
options(shiny.fullstacktrace = T)
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
shiny::runApp('Documents/Guane')
runApp('Documents/Guane')
options(shiny.fullstack=T)
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
library(DDD)
tree <- read.newick('Documents/Guane/data/Cetacea.phy')
cbt<-branching.times(tree)
cbt
bd_res_ddd<-bd_ML(brts=cbt,missnumspec=2,cond=1)
bd_res_ddd<-bd_ML(brts=cbt,missnumspec=2,cond=1)
bdvar_res_ddd<-bd_ML(brts=cbt,missnumspec=2,cond=1,
tdmodel=1,initparsopt=c(0.1,0.1,0.1,0.1),
idparsopt=1:4,btorph=0)
dd_res_ddd<-dd_ML(brts=cbt,missnumspec=2,cond=1,
btorph=0)
shiny::runApp('Documents/Guane')
runApp('Documents/Guane')
install.packages("diversitree")
shiny::runApp()
devtools::install_github(repo = 'https://github.com/liamrevell/phytools',force = TRUE)
install.packages("devtools")
remove.packages("phytools")
devtools::install_github(repo = 'https://github.com/liamrevell/phytools',force = TRUE)
runApp()
library(phytools)
remove.packages("phytools")
remove.packages("corHMM")
devtools::install_github(repo = 'https://github.com/liamrevell/phytools',force = TRUE)
install.packages("digest")
devtools::install_github(repo = 'https://github.com/liamrevell/phytools',force = TRUE)
library(corHMM)
install.packages("corHMM")
shiny::runApp()
runApp()
