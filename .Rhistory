plot(NA,bty = "n",  las = 1,axes = F,yaxs='i',
main= 'Histogram: Phylogenetic Independent Contrasts', sub = NULL,
xlab= 'input$dataVar', ylab= ' N Tips' )
plot(NA,xlim = c(xlim[1]-0.05,xlim[2]*1.05), ylim = c(ylim[1]-0.5, ylim[2]*1.05),bty = "n",  las = 1,axes = F,yaxs='i',
main= 'Histogram: Phylogenetic Independent Contrasts', sub = NULL,
xlab= 'input$dataVar', ylab= ' N Tips' )
grid( lty = 2, lwd = 0.3)
axis(side = 1, lwd=0.5, lwd.ticks = .5,mgp = c(3, 1, 0))
axis(side = 2, lwd=0.5,lwd.ticks = .5,las = 2, mgp = c(3, 1, 0))
hist(x = mode, add = TRUE,
col=make.transparent(color1[1], 0.5), border= make.transparent(color1[1], 0.8) )
q <-qqnorm(y = mode,plot=F)
par(adj=0.5,
cex.axis=0.9,
cex.lab= 1,
cex.main= 1.2,
family="sans")
xlim <- range(q$x)
ylim <- range(q$y)
plot(q$x, q$y, yaxs = "i", xlim = c(xlim[1]-0.05,xlim[2]*1.05), ylim = c(ylim[1]-0.5,ylim[2]*1.05), cex=1.2,
type = 'p',axes = F,main = 'Normal Q-Q Plot: PIC', sub = NULL, xlab = 'Theoretical Quantiles', ylab = 'PIC Quantiles',
col=make.transparent(color1[1], 0.8),pch=21,bg=make.transparent(color1[1], 0.2))
abline(lm(q$y ~ q$x),lwd= 0.8, col=make.transparent(color1[2], 0.8))
grid( lty = 2, lwd = 0.3)
axis(side = 1, lwd=0.5, lwd.ticks = .5,mgp = c(3, 1, 0.5))
axis(side = 2, lwd=0.5,lwd.ticks = .5,las = 2, mgp = c(3, 1.3, 0.5))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
h <- hist(x =  mode,plot=F)
par(adj=0.5,
cex.axis=0.9,
cex.lab= 1,
cex.main= 1.2,
family="sans")
xlim <- range(h$mids)
ylim <- range(h$counts)
plot(NA,xlim = c(xlim[1]-0.05,xlim[2]*1.05), ylim = c(ylim[1]-0.5, ylim[2]*1.05),bty = "n",  las = 1,axes = F,yaxs='i',
main= 'Histogram: Phylogenetic Independent Contrasts', sub = NULL,
xlab= 'input$dataVar', ylab= ' N Tips' )
grid( lty = 2, lwd = 0.3)
axis(side = 1, lwd=0.5, lwd.ticks = .5,mgp = c(3, 1, 0))
axis(side = 2, lwd=0.5,lwd.ticks = .5,las = 2, mgp = c(3, 1, 0))
hist(x = mode, add = TRUE,
col=make.transparent(color1[1], 0.5), border= make.transparent(color1[1], 0.8) )
plot(NA,xlim = xlim, ylim = c(0, ylim[2]*1.1),bty = "n",  las = 1,axes = F,yaxs='i',
main= 'Histogram: Phylogenetic Independent Contrasts', sub = NULL,
xlab= 'input$dataVar', ylab= ' N Tips' )
grid( lty = 2, lwd = 0.3)
axis(side = 1, lwd=0.5, lwd.ticks = .5,mgp = c(3, 1, 0))
axis(side = 2, lwd=0.5,lwd.ticks = .5,las = 2, mgp = c(3, 1, 0))
hist(x = mode, add = TRUE,
col=make.transparent(color1[1], 0.5), border= make.transparent(color1[1], 0.8) )
h <- hist(x =  mode,plot=F)
par(adj=0.5,
cex.axis=0.9,
cex.lab= 1,
cex.main= 1.2,
family="sans")
xlim <- range(h$mids)
ylim <- range(h$counts)
plot(NA,xlim = xlim, ylim = c(0, ylim[2]*1.1),bty = "n",  las = 1,axes = F,
main= 'Histogram: Phylogenetic Independent Contrasts', sub = NULL,
xlab= 'input$dataVar', ylab= ' N Tips' )
grid( lty = 2, lwd = 0.3)
axis(side = 1, lwd=0.5, lwd.ticks = .5,mgp = c(3, 1, 0))
axis(side = 2, lwd=0.5,lwd.ticks = .5,las = 2, mgp = c(3, 1, 0))
hist(x = mode, add = TRUE,
col=make.transparent(color1[1], 0.5), border= make.transparent(color1[1], 0.8) )
axis(side = 2, lwd=0.5,lwd.ticks = .5,las = 2, mgp = c(3, 1, 0.5))
h <- hist(x =  mode,plot=F)
par(adj=0.5,
cex.axis=0.9,
cex.lab= 1,
cex.main= 1.2,
family="sans")
xlim <- range(h$mids)
ylim <- range(h$counts)
plot(NA,xlim = xlim, ylim = c(0, ylim[2]*1.1),bty = "n",  las = 1,axes = F,
main= 'Histogram: Phylogenetic Independent Contrasts', sub = NULL,
xlab= 'input$dataVar', ylab= ' N Tips' )
grid( lty = 2, lwd = 0.3)
axis(side = 1, lwd=0.5, lwd.ticks = .5,mgp = c(3, 1, 0))
axis(side = 2, lwd=0.5,lwd.ticks = .5,las = 2, mgp = c(3, 1, 0.5))
hist(x = mode, add = TRUE,
col=make.transparent(color1[1], 0.5), border= make.transparent(color1[1], 0.8) )
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plotTree.datamatrix
plotTree
mode <- setNames(data$Simul2,row.names(data))
plotTree.datamatrix(tree,as.data.frame(mode),colors=list(DisCols),header=FALSE,fsize=0.5,lwd = 0.8)
DisColPal <- paletteer::paletteer_c("grDevices::Purple-Yellow", length(levels(SelectedVarDisc())))
DisCols <- setNames(DisColPal,levels(SelectedVarDisc()))
DisColPal <- paletteer::paletteer_c("grDevices::Purple-Yellow", length(levels(mode)))
DisCols <- setNames(DisColPal,levels(mode))
plotTree.datamatrix(tree,as.data.frame(mode),colors=list(DisCols),header=FALSE,fsize=0.5,lwd = 0.8)
legend('topright',legend = levels(mode),pch = 22,pt.cex=1.5, pt.bg = DisCols, bty='n',cex = 0.8)
nodelabels(pie=pieDiscML,piecol=DisCols,cex=0.5)
plotTree.datamatrix(tree,as.data.frame(mode),colors=list(DisCols),header=FALSE,fsize=0.5,lwd = 1)
legend('topright',legend = levels(mode),pch = 22,pt.cex=1.5, pt.bg = DisCols, bty='n',cex = 0.8)
plotTree.datamatrix(tree,as.data.frame(mode),colors=list(DisCols),header=FALSE,fsize=0.5,lwd = 2)
plotTree.datamatrix(tree,as.data.frame(mode),colors=list(DisCols),header=FALSE,fsize=0.5,edge.width=0.8)
plotTree
plotTree.datamatrix(tree,as.data.frame(mode),colors=list(DisCols),header=FALSE,fsize=0.5,lwd=3)
plotTree.datamatrix(tree,as.data.frame(mode),colors=list(DisCols),header=FALSE,fsize=0.5,lwd=3)
plotTree.datamatrix(tree = tree,X = as.data.frame(mode),colors=list(DisCols),header=FALSE,fsize=0.5,lwd=3,pts=3)
AncDiscMl$outcorHMM
pieDiscML <- AncDiscMl$outcorHMM[[Dimod[1]]]$states
pieDiscML <- AncDiscMl$outcorHMM[[1]]$states
pieDiscML
pieDiscML <- AncDiscMl$outcorHMM[[1]]$states
DisColPal <- paletteer::paletteer_c("grDevices::Purple-Yellow", length(levels(mode)))
DisCols <- setNames(DisColPal,levels(mode))
plotTree.datamatrix(tree = tree,X = as.data.frame(mode),colors=list(DisCols),header=FALSE,fsize=0.5,lwd=3,pts=3)
legend('topright',legend = levels(mode),pch = 22,pt.cex=1.5, pt.bg = DisCols, bty='n',cex = 0.8)
nodelabels(pie=pieDiscML,piecol=DisCols,cex=0.5)
runApp()
runApp()
runApp(launch.browser = T)
runApp(launch.browser = T)
plotTree
plotTree.datamatrix
fix(plotTree.datamatrix)
plotTree.datamatrix(tree = tree,X = as.data.frame(mode),colors=list(DisCols),header=FALSE,fsize=0.5,lwd=3,pts=3)
fix(plotTree.datamatrix)
plotTree.datamatrix(tree = tree,X = as.data.frame(mode),colors=list(DisCols),header=FALSE,fsize=0.5,lwd=3,pts=3)
runApp()
anc.ML
phytools:::anc.EB
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(bslib)
thematic::thematic_shiny(font = "auto")
ui <- fluidPage(
theme = bs_theme(),
...
)
server <- function(input, output) {
bs_themer()
...
}
shinyApp(ui, server)
library(shiny)
library(bslib)
thematic::thematic_shiny(font = "auto")
ui <- fluidPage(
theme = bs_theme(),
...
)
server <- function(input, output) {
bs_themer()
...
}
shinyApp(ui, server)
ui <- fluidPage(
theme = bs_theme(),
...
)
ui <- fluidPage(
theme = bs_theme(),
)
server <- function(input, output) {
bs_themer()
...
}
shinyApp(ui, server)
library(shiny)
library(bslib)
thematic::thematic_shiny(font = "auto")
ui <- fluidPage(
theme = bs_theme(),
)
server <- function(input, output) {
bs_themer()
}
shinyApp(ui, server)
library(shiny)
library(bslib)
thematic::thematic_shiny(font = "auto")
ui <- fluidPage(
theme = bs_theme(),
)
server <- function(input, output) {
bs_themer()
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
knitr::include_graphics("tab-before.png")
knitr::include_graphics("tab-before.png")
knitr::include_graphics("tab-before.png")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
options(shiny.fullstacktrace=T)
runApp()
runApp()
runApp()
runApp()
if (nStatesBI()[1] == 2) {
# update model list
updateSelectInput(session, "ModelsDisBI",
choices = c('Select' = 'Select','ER' = 'ER', 'ARD' = 'ARD',
'Ireversible01' = 'Ireversible01',
'Ireversible10' = 'Ireversible10'))
} else {
#update model list for 3 states
updateSelectInput(session, "ModelsDisBI",
choices = c('Select' = 'Select','ER' = 'ER', 'ARD' = 'ARD', 'SYM' = 'SYM', 'Costumize' = 'Costumize'))
}
runApp()
runApp()
runApp()
runApp()
runApp()
remove.packages("phytools")
devtools::install_github(repo = 'https://github.com/liamrevell/phytools',force = TRUE)
runApp()
runApp()
runApp()
## Not run:
## load tree and data from Revell & Collar (2009)
data(sunfish.tree)
data(sunfish.data)
## extract discrete character (feeding mode)
fmode<-setNames(sunfish.data$feeding.mode,
rownames(sunfish.data))
## do stochastic mapping
smap.trees<-make.simmap(sunfish.tree,fmode,model="ER",
nsim=100,pi="fitzjohn")
## do stochastic mapping
smap.trees<-make.simmap(sunfish.tree,fmode,model="ER",
nsim=100,pi="fitzjohn")
make.simmap<-function(tree,x,model="SYM",nsim=1,...){
if(inherits(tree,"multiPhylo")){
ff<-function(yy,x,model,nsim,...){
zz<-make.simmap(yy,x,model,nsim,...)
if(nsim>1) class(zz)<-NULL
return(zz)
}
if(nsim>1) mtrees<-unlist(sapply(tree,ff,x,model,nsim,...,simplify=FALSE),recursive=FALSE)
else mtrees<-sapply(tree,ff,x,model,nsim,...,simplify=FALSE)
class(mtrees)<-c("multiSimmap","multiPhylo")
} else {
## get optional arguments
if(hasArg(pi)) pi<-list(...)$pi
else pi<-"equal"
if(hasArg(message)) pm<-list(...)$message
else pm<-TRUE
if(hasArg(tol)) tol<-list(...)$tol
else tol<-0
if(hasArg(Q)) Q<-list(...)$Q
else Q<-"empirical"
if(hasArg(burnin)) burnin<-list(...)$burnin
else burnin<-1000
if(hasArg(samplefreq)) samplefreq<-list(...)$samplefreq
else samplefreq<-100
if(hasArg(vQ)) vQ<-list(...)$vQ
else vQ<-0.1
prior<-list(alpha=1,beta=1,use.empirical=FALSE)
if(hasArg(prior)){
pr<-list(...)$prior
prior[names(pr)]<-pr
}
## done optional arguments
# check
if(!inherits(tree,"phylo")) stop("tree should be object of class \"phylo\".")
# if vector convert to binary matrix
if(!is.matrix(x)) xx<-to.matrix(x,sort(unique(x)))
else xx<-x
xx<-xx[tree$tip.label,]
xx<-xx/rowSums(xx)
# reorder to cladewise
tree<-bt<-reorder.phylo(tree,"cladewise")
if(!is.binary(bt)) bt<-multi2di(bt,random=FALSE)
# some preliminaries
N<-Ntip(tree)
m<-ncol(xx)
root<-N+1
# get conditional likelihoods & model
if(is.character(Q)&&Q=="empirical"){
XX<-getPars(bt,xx,model,Q=NULL,tree,tol,m,pi=pi,args=list(...))
L<-XX$L
Q<-XX$Q
logL<-XX$loglik
pi<-XX$pi
if(pi[1]=="equal") pi<-setNames(rep(1/m,m),colnames(L)) # set equal
else if(pi[1]=="estimated") pi<-statdist(Q) # set from stationary distribution
else if(pi[1]=="fitzjohn") pi<-"fitzjohn"
else pi<-pi/sum(pi) # obtain from input
if(pm) printmessage(Q,pi,method="empirical")
mtrees<-replicate(nsim,smap(tree,x,N,m,root,L,Q,pi,logL),simplify=FALSE)
} else if(is.character(Q)&&Q=="mcmc"){
if(prior$use.empirical){
qq<-fitMk(bt,xx,model)$rates
prior$alpha<-qq*prior$beta
}
get.stationary<-if(pi[1]=="estimated") TRUE else FALSE
if(pi[1]%in%c("equal","estimated"))
pi<-setNames(rep(1/m,m),colnames(xx)) # set equal
else if(pi[1]=="fitzjohn") pi<-"fitzjohn"
else pi<-pi/sum(pi) # obtain from input
XX<-mcmcQ(bt,xx,model,tree,tol,m,burnin,samplefreq,nsim,vQ,prior,pi=pi)
L<-lapply(XX,function(x) x$L)
Q<-lapply(XX,function(x) x$Q)
logL<-lapply(XX,function(x) x$loglik)
pi<-if(get.stationary) lapply(Q,statdist) else
if(pi[1]=="fitzjohn") lapply(XX,function(x) x$pi) else
lapply(1:nsim,function(x,y) y,y=pi)
if(pm) printmessage(Reduce('+',Q)/length(Q),Reduce('+',pi)/length(pi),
method="mcmc")
mtrees<-if(nsim>1) mapply(smap,L=L,Q=Q,pi=pi,logL=logL,MoreArgs=
list(tree=tree,x=x,N=N,m=m,root=root),SIMPLIFY=FALSE) else
list(smap(tree=tree,x=x,N=N,m=m,root=root,L=L[[1]],Q=Q[[1]],pi=pi[[1]],
logL=logL[[1]]))
} else if(is.matrix(Q)){
XX<-getPars(bt,xx,model,Q=Q,tree,tol,m,pi=pi,args=list(...))
L<-XX$L
logL<-XX$loglik
pi<-XX$pi
if(pi[1]=="equal") pi<-setNames(rep(1/m,m),colnames(L)) # set equal
else if(pi[1]=="estimated") pi<-statdist(Q) # set from stationary distribution
else if(pi[1]=="fitzjohn") pi<-"fitzjohn"
else pi<-pi/sum(pi) # obtain from input
if(pm) printmessage(Q,pi,method="fixed")
mtrees<-replicate(nsim,smap(tree,x,N,m,root,L,Q,pi,logL),simplify=FALSE)
}
if(length(mtrees)==1) mtrees<-mtrees[[1]]
else class(mtrees)<-c("multiSimmap","multiPhylo")
}
(if(hasArg(message)) list(...)$message else TRUE)
if((if(hasArg(message)) list(...)$message else TRUE)&&inherits(tree,"phylo")) message("Done.")
return(mtrees)
}
## do stochastic mapping
smap.trees<-make.simmap(sunfish.tree,fmode,model="ER",
nsim=100,pi="fitzjohn")
## do stochastic mapping
smap.trees<-make.simmap(sunfish.tree,fmode,model="ER",
nsim=100,pi="equal")
shiny::runApp()
