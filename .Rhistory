dvar_mle
## optimize model
dvar_mle<-find.mle(dvar_model, st,method="subplex")
dvar_mle
## optimize model
dvar_mle<-find.mle(dvar_model, st,method="nlminb")
dvar_mle
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('constant.t', 'constant.t'))
fityule <- find.mle(func = yule, x.init=c(0.1,0), method="subplex")
fityule
fityule <- find.mle(func = yule, x.init=c(0.01,0.01,0), method="subplex")
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('exp.t', 'constant.t'))
fityule <- find.mle(func = yule, x.init=c(0.01,0.01,0), method="subplex")
fityule
############# YULE #############
yule <-make.yule(tree = tree,sampling.f = 0.9,unresolved = NULL)
fityule <- find.mle(func = yule, x.init=0.1, method="optim")
<- find.mle(func = yule, x.init=0.1, method="optim")
fityule
############# YULE #############
yule <-make.bd(tree = tree,sampling.f = 0.9,unresolved = NULL)
fityule <- find.mle(func = yule, x.init=0.1, method="optim")
fityule <- find.mle(func = yule, x.init=c(0.1,0), method="optim")
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('exp.t', 'constant.t'))
fityule <- find.mle(func = yule, x.init=c(0.01,0), method="subplex")
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('linear.t', 'constant.t'))
fityule <- find.mle(func = yule, x.init=c(0.01,0.01,0), method="subplex")
yule
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('linear.t', 'constant.t'))
fityule <- find.mle(func = yule, x.init=c(0.01,0.01,0), method="subplex")
fityule
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('stepf.t', 'constant.t'))
fityule <- find.mle(func = yule, x.init=c(0.01,0.01,0.01,0.01,0), method="subplex")
fityule <- find.mle(func = yule, x.init=c(0.01,0.01,0), method="subplex")
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('spline.t', 'constant.t'))
library(phytools)
library(diversitree)
set.seed(1)
tree <- read.newick('Documents/Guane/data/Cetacea.phy')
tree
bd <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('constant.t', 'constant.t'))
fitbd <- find.mle(func = bd, x.init=c(0.1,0.01), method="subplex")
t<-seq(0,round(max(branching.times(phy = tree)),1),length.out=100)
b <- 0.1
b<-rep(b ,length(t))
d <- 0.01
d<-rep(d ,length(t))
plot(t,b,type="l",col="black",lwd=3,
ylim=c(0,max(b,d)*1.5),xlab="time",
ylab=expression('Lambda'))
lines(t,d,col="lightgrey",lwd=3)
mtext("a)",line=1,adj=0)
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c("constant.t","exp.t"))
fityule <- find.mle(func = yule, x.init=c(0.1,0.01,0.01), method="minqa")
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c("constant.t","stepf.t"))
fityule <- find.mle(func = yule, x.init=c(0.1,0.01,0.01,0.01), method="subplex")
fityule
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c("constant.t","spline.t"))
fityule <- find.mle(func = yule, x.init=c(0.1,0.01,0.01), method="subplex")
## Then, with a simple fit through this.
x <- seq(0, round(max(branching.times(phy = tree)),1), length.out=101)
x
y <- sin(x/t.max*2*pi)
y <- sin(x/round(max(branching.times(phy = tree)),1)*2*pi)
y
spline.data
spline.data <- list(t=x, y=y)
spline.data
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c("constant.t","spline.t"),spline.data = spline.data)
## Then, with a simple fit through this.
x <- seq(0, max(branching.times(phy = tree)), length.out=101)
y <- sin(x/max(branching.times(phy = tree))*2*pi)
spline.data <- list(t=x, y=y)
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c("constant.t","spline.t"),spline.data = spline.data)
fityule <- find.mle(func = yule, x.init=c(0.1,0.01,0.01), method="subplex")
yule
x
y <- sin(x/max(branching.times(phy = tree))*2*pi)
y
spline.data <- list(t=x, y=y)
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c("constant.t","spline.t"),spline.data = spline.data)
fityule <- find.mle(func = yule, x.init=c(0.1,0.01,0.01), method="subplex")
shiny::runApp('Documents/Guane')
runApp('Documents/Guane')
bd <-make.bd(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('constant.t', 'constant.t'))
bd <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('constant.t', 'constant.t'))
fitbd <- find.mle(func = bd, x.init=c(0.1,0.01), method="subplex")
fitbd
exp(-0.01*0.1)
t
t<-seq(0,round(max(branching.times(phy = tree)),1),length.out=100)
l=1
a=-0.05
b<-rep(3,length(t))
d<-l*exp(-a*t)
## plot curve
plot(t,b,type="l",col="black",lwd=3,ylim=c(0,5),
xlab="time",
ylab=expression(paste("rate (",lambda," or ",mu,")")))
lines(t,d,col="lightgrey",lwd=3)
mtext("c)",line=1,adj=0)
b<-rep(0,length(t))
b
spvar <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('exp.t', 'constant.t'))
fitexp <- find.mle(func = sp, x.init=c(0.01,0.01,0), method="subplex")
fitexp <- find.mle(func = spvar, x.init=c(0.01,0.01,0), method="subplex")
spvar <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('exp.t', 'constant.t'))
fitexp <- find.mle(func = spvar, x.init=c(0.01,0.01,0.1), method="subplex")
t<-seq(0,round(max(branching.times(phy = tree)),1),length.out=100)
l=0.01
a=-0.01
b<-l*exp(-a*t)
d<-rep(0.1,length(t))
## plot curve
plot(t,b,type="l",col="black",lwd=3,ylim=c(0,5),
xlab="time",
ylab=expression(paste("rate (",lambda," or ",mu,")")))
lines(t,d,col="lightgrey",lwd=3)
mtext("c)",line=1,adj=0)
plot(t,b,type="l",col="black",lwd=3,ylim=c(0,max(b,d)),
xlab="time",
ylab=expression(paste("rate (",lambda," or ",mu,")")))
lines(t,d,col="lightgrey",lwd=3)
mtext("c)",line=1,adj=0)
## Then, with a simple fit through this.
x <- seq(0, max(branching.times(phy = tree)), length.out=101)
x
## Then, with a simple fit through this.
x <- seq(0, max(branching.times(phy = tree)), length.out=5)
y <- sin(x/max(branching.times(phy = tree))*2*pi)
spline.data <- list(t=x, y=y)
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c("constant.t","spline.t"),spline.data = spline.data)
fityule <- find.mle(func = yule, x.init=c(0.1,0.01,0.01), method="subplex")
yule
set.seed(1)
tree <- read.newick('Documents/Guane/data/Cetacea.phy')
library(phytools)
library(diversitree)
set.seed(1)
tree <- read.newick('Documents/Guane/data/Cetacea.phy')
tree
spvar <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('stepf.t', 'constant.t'))
fitexp <- find.mle(func = spvar, x.init=c(0.01,0.01,1,0.1), method="minqa",control = list(optim.method= "newoua"))
fitexp
spvar <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('sigmoid.t', 'constant.t'))
fitexp <- find.mle(func = spvar, x.init=c(0.01,0.01,1,0.1,0.1), method="minqa",control = list(optim.method= "newoua"))
shiny::runApp('Documents/Guane')
runApp('Documents/Guane')
options(shiny.fullstacktrace = T)
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
shiny::runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
options(shiny.fullstacktrace = T)
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
shiny::runApp('Documents/Guane')
runApp('Documents/Guane')
options(shiny.fullstack=T)
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
library(DDD)
tree <- read.newick('Documents/Guane/data/Cetacea.phy')
cbt<-branching.times(tree)
cbt
bd_res_ddd<-bd_ML(brts=cbt,missnumspec=2,cond=1)
bd_res_ddd<-bd_ML(brts=cbt,missnumspec=2,cond=1)
bdvar_res_ddd<-bd_ML(brts=cbt,missnumspec=2,cond=1,
tdmodel=1,initparsopt=c(0.1,0.1,0.1,0.1),
idparsopt=1:4,btorph=0)
dd_res_ddd<-dd_ML(brts=cbt,missnumspec=2,cond=1,
btorph=0)
shiny::runApp('Documents/Guane')
library(DDD)
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
shiny::runApp('Documents/Guane')
runApp('Documents/Guane')
prueba
prueba <- list()
prueba$pruebas <-list()
prueba$pruebass <- list()
prueba$pruebas$p1 <- list()
prueba$pruebas$p2 <- list()
prueba$pruebas$pu1 <- list()
prueba$pruebas$pu2 <- list()
prueba
names(prueba)
lapply(prueba[1], names)
runApp('Documents/Guane')
prueba <- list()
prueba$pruebas <-list()
prueba$pruebass <- list()
prueba$pruebas$p1 <- list()
prueba$pruebas$p2 <- list()
prueba$pruebas$p1$t1 <- list()
prueba$pruebas$p2$t2 <- list()
prueba$pruebas$pu1 <- list()
prueba$pruebas$pu2 <- list()
prueba$pruebas$pu1$t3 <- list()
prueba$pruebas$pu2$t4 <- list()
prueba
lapply(prueba[1], names)
lapply(prueba[[1]], names)
runApp('Documents/Guane')
runApp('Documents/Guane')
lapply(prueba[[1]], names)
lapply(prueba[1], names)
lapply(prueba[1][1], names)
lapply(prueba[1][[1]], names)
sdapply(prueba[1][[1]], names)
ldapply(prueba[[1]], names)
lapply(prueba[[1]], names)
c(lapply(prueba[[1]], names))
c(sapply(prueba[[1]], names))
sapply(prueba[[1]], names)
c(lapply(prueba[[1]], names))
runApp('Documents/Guane')
c(lapply(prueba[[1]], names))
c(vapply(prueba[[1]], names))
c(sapply(prueba[[1]], names))
c(sapply(prueba[[1]], names)[1])
cat(sapply(prueba[[1]], names))
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
cat(sapply(prueba[[1]], names))
c(sapply(prueba[[1]], names))
c(sapply(prueba[1][[1]], names))
sapply(prueba[1][1], names)
sapply(prueba[1][1][1], names)
sapply(prueba[1][1][[1]], names)
sapply(prueba[1][[1]], names)
sapply(prueba[1][1][[1]], names)
sapply(prueba[1][1], names)
sapply(prueba[1][1][1], names)
c(sapply(prueba[1][1], names))
runApp('Documents/Guane')
runApp('Documents/Guane')
c(sapply(prueba[1][1], names))
c(sapply(prueba[1][[1]], names))
c(sapply(prueba[1][1][[1]], names))
prueba$pruebas$pu1$t3$rho <- list()
prueba$pruebas$pu1$t3$rate <- list()
prueba$pruebas$pu2$t4$rho <- list()
prueba$pruebas$pu2$t4$rate <- list()
prueba
c(sapply(prueba[1][1][[1]], names))
prueba[1][1][[1]]
c(sapply(prueba[1][[1]][[1]], names))
c(sapply(prueba[1][[1]], names))
cat(sapply(prueba[1][[1]], names))
as.character(cat(sapply(prueba[1][[1]], names)))
as.character(c(sapply(prueba[1][[1]], names)))
runApp('Documents/Guane')
runApp('Documents/Guane')
DiverModML$modelList <- list()
runApp('Documents/Guane')
prueba
prueba <- list()
prueba <- 'l'
prueba <- 'c'
prueba
prueba <- list()
prueba <- 'l'
prueba <- c(prueba, 'c')
prueba
DiverModML$modelList <- c(DiverModML$modelList,paste('BD',DiverModML$countBD, sep = ''))
runApp('Documents/Guane')
prueba <- list()
prueba$pruebas <-list()
prueba$pruebas$p1 <- list()
prueba$pruebas$p2 <- list()
prueba$pruebas$p1$t1 <- list()
prueba$pruebas$p2$t2 <- list()
prueba$pruebas$pu1 <- list()
prueba$pruebas$pu2 <- list()
prueba$pruebas$pu1$t3$rho <- list()
prueba$pruebas$pu1$t3$rate <- list()
prueba$pruebas$pu2$t4$rho <- list()
prueba$pruebas$pu2$t4$rate <- list()
prueba
grep('t3',prueba)
grepl('t3',prueba)
regexpr('t3',prueba)
prueba
gregexpr('t3',prueba)
which(prueba == 't3')
prueba[1] == 't2'
prueba[1]
prueba[[1]] == 't2'
which(prueba[[1]] == 't2')
prueba[[1]] %in%'t2'
prueba[[1]] %in% t2
names(prueba[[1]]) %in% 't2'
names(prueba[[1]])
prueba
prueba[1]
prueba[[1]]
names(prueba[[1]]) %in% 't2'
names(prueba[[1]][1])
names(prueba[[1]][1])
names(prueba[[1]][1]) %in% 't1'
names(prueba[[1]][1])
names(prueba[[1]][[1]])
names(prueba[[1]][[1]]) %in% 't1'
sapply(prueba[[1]][[1]], names)
prueba[[1]][[1]]
prueba
prueba[[1]][[1]]
sapply(prueba[[1]][[1]], names)
sapply(prueba[[1]][1], names)
as.character(c(sapply(prueba[[1]][1], names)))
prueba
sapply(prueba[1][[1]], names)
sapply(prueba[1][1], names)
names(prueba[1][1])
prueba[1][1]
names(prueba[1][1])
sapply(prueba[1][1], names)
sapply(prueba[1][1], names)) %in% 'p2'
sapply(prueba[1][1], names) %in% 'p2'
which(sapply(prueba[1][1], names) %in% 'p2')
pruebas[2]
pruebas
prueba[2]
prueba
prueba[[2]]
prueba[[1]]
prueba[[1]][2]
prueba
prueba[1]
prueba[1][1]
runApp('Documents/Guane')
which(sapply(prueba[1][1], names) %in% 'p2')
prueba[[1]][2]
prueba
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
shiny::runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
load('Documents/Guane/data/Example.noUltrametric.RDS')
readRDS('Documents/Guane/data/Example.noUltrametric.RDS')
treeModML <- readRDS('Documents/Guane/data/Example.noUltrametric.RDS')
treeModML <- readRDS('Documents/Guane/data/Example.noUltrametric.RDS')
yule <-make.yule(tree = treeModML, sampling.f = 0.5, unresolved = NULL)
treeModML <- force.ultrametric(treeModML)
yule <-make.yule(tree = treeModML, sampling.f = 0.5, unresolved = NULL)
treeModML <- readRDS('Documents/Guane/data/Example.noUltrametric.RDS')
treeModML <- force.ultrametric(treeModML)
yule <-make.yule(tree = treeModML, sampling.f = 0.5, unresolved = NULL)
ageTableDiverDT <- readRDS(file = 'Documents/Guane/data/Example.ages.Chrons.csv')
ageTableDiverDT <- read.csv(file = 'Documents/Guane/data/Example.ages.Chrons.csv')
calibration<-makeChronosCalib(treeModML,node=ageTableDiverDT[,1],
age.min=ageTableDiverDT[,2],age.max=ageTableDiverDT[,3])
treeCal <- chronos(treeModML,calibration=calibration)
calibration<-makeChronosCalib(treeModML,node=ageTableDiverDT[,1],
age.min=ageTableDiverDT[,2],age.max=ageTableDiverDT[,3])
treeCal <- chronos(treeModML,calibration=calibration)
treeModML$edge.length < 0
which(treeModML$edge.length < 0)
treeModML$edge.length[which(treeModML$edge.length < 0)]
gc()
#'
#' @description This function runs the \emph{Wallace} application in the user's default web browser.
#'
#' @note Please see the official website (\url{https://wallaceecomod.github.io/}) for more details. If you have questions about the application, please participate in the \href{https://groups.google.com/forum/#!forum/wallaceecomod}{Google Group}, or email the team directly: \url{wallaceEcoMod@@gmail.com}.
#'
#' @examples \dontrun{
#' run_wallace()
#' }
#'
#' @export
run_wallace <- function(){
app_path <- system.file("shiny", package = "wallace")
return(shiny::runApp(app_path, launch.browser = TRUE))
}
#' Package: \tab wallace\cr
#' Type: \tab Package\cr
#' Version: \tab 1.0.0\cr
#' Date: \tab 2017-11-23\cr
#' License: \tab GNU 3.0\cr
#' }
#'
#' @references Kass J.M., Vilela B., Aeillo-Lammens M.E., Muscarella R., Merow C., and Anderson R.P. (2017) \emph{Wallace}: A modular platform for reproducible ecological modeling. Version 1.0.0.
#' @import shiny leaflet
#' @importFrom magrittr "%>%"
NULL
shiny::runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
diver <- list()
diver$object <- list()
diver$object$yule <- list()
diver$object$yule$yule1 <- list()
diver$object$yule$yule1$Rho <- 0.1
diver$object$yule$yule1$Rate <- 0.2
diver$object$yule$yule2 <- list()
diver$object$yule$yule2$Rho <- 0.1
diver$object$yule$yule2$Rate <- 0.1
diver$object$yule$yule3 <- list()
diver$object$yule$yule3$Rho <- 0.1
diver$object$yule$yule3$Rate <- 0.3
models <- c('yule1', 'yule3')
which(names(diver$object$yule) %in%  models)
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
library(shiny)
library(fullPage)
install.packages("fullPage")
library(shiny)
library(fullPage)
remotes::install_github("RinteRface/fullPage")
runApp('Documents/Guane')
install.packages("bslib")
runApp('Documents/Guane')
remove.packages("htmltools", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
install.packages("htmltools")
library(htmltools)
remove.packages("bslib", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
install.packages("bslib")
library(bslib)
shiny::runApp('Documents/Guane')
install.packages(c(
"gapminder", "ggforce", "gh", "globals", "openintro", "profvis",
"RSQLite", "shiny", "shinycssloaders", "shinyFeedback",
"shinythemes", "testthat", "thematic", "tidyverse", "vroom",
"waiter", "xml2", "zeallot"
))
install.packages(c("gapminder", "ggforce", "gh", "globals", "openintro", "profvis", "RSQLite", "shiny", "shinycssloaders", "shinyFeedback", "shinythemes", "testthat", "thematic", "tidyverse", "vroom", "waiter", "xml2", "zeallot"))
shiny::runApp('Documents/Guane')
BDmodels <- which(names(DiverModML$runObjModels$BD) %in%  input$modelsFitModML)
runApp('Documents/Guane')
setwd("~/Documents/Guane")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
