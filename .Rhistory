install.packages("corHMM")
library(shiny)
install.packages("ape")
install.packages("ape")
install.packages("ape")
install.packages("paletteer")
install.packages("coda")
install.packages("shiny")
install.packages("shiny")
install.packages("bslib")
#devtools::install_github(repo = 'https://github.com/liamrevell/phytools',force = TRUE)
library(phytools)
install.packages("phytools")
install.packages("shinyjs")
install.packages("rhandsontable")
install.packages("shinyWidgets")
install.packages("corHMM")
install.packages("corHMM")
library(shiny)
library(bslib)
library(ape)
library(paletteer)
library(coda)
library(corHMM)
#devtools::install_github(repo = 'https://github.com/liamrevell/phytools',force = TRUE)
library(phytools)
library(shinyjs)
library(rhandsontable)
library(shinyWidgets)
install.packages("devtools")
remove.packages(phytools)
remove.packages('phytools')
devtools::install_github(repo = 'https://github.com/liamrevell/phytools',force = TRUE)
#devtools::install_github(repo = 'https://github.com/liamrevell/phytools',force = TRUE)
library(phytools)
#devtools::install_github(repo = 'https://github.com/liamrevell/phytools',force = TRUE)
library(phytools)
#devtools::install_github(repo = 'https://github.com/liamrevell/phytools',force = TRUE)
library(phytools)
devtools::install_github(repo = 'https://github.com/liamrevell/phytools',force = TRUE)
output$PhyloPlot <- renderPlot( height = heightDt  , width = widthDt,{
req(treeInput())
rawPhylo <- plot.phylo(treeInput(), show.tip.label = input$tipLabels[1],
cex = input$tipSize[1],use.edge.length = input$branchLength[1], type = input$plotType,
edge.width = 0.8,edge.color = 'grey40')
return(rawPhylo)
})
library(shiny)
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
setwd("~/Documents/Guane/Server")
setwd("~/Documents/Guane")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tree <- read.tree('Documents/Guane/data/etheostoma_percina_chrono.tre.txt')
tree <- read.tree('data/etheostoma_percina_chrono.tre')
tree <- read.tree('data/etheostoma_percina_chrono.tre.txt')
is.ultrametric()
is.ultrametric(tree)
tree
tree$edge.length
tree$edge.length <- round(tree$edge.length, 3)
is.ultrametric(tree)
saveRDS(tree, "Documents/Guane/data/ExampleDiver")
saveRDS(tree, "data/ExampleDiver")
is.ultrametric(tree)
runApp()
selectInput(inputId = 'frcUltButtDiverDT', label = 'Force ultrametricity',choices = c('Select' == 'selectDiverDT', 'Round decimals' == 'rounddiverDT', 'Chronos dating' == 'chronosDiverDt') )
runApp()
runApp()
updateSelectInput(session = 'frcUltButtDiverDT', label = 'Force ultrametricity', c('Select' == 'selectDiverDT', 'Round decimals' == 'rounddiverDT', 'Chronos dating' == 'chronosDiverDt'))
runApp()
observeEvent(ultrametricDiverDT()  ,{
if(ultrametricDiverDT() == F){
output$forceultrDiverDT <- renderUI({
selectInput(inputId = 'frcUltButtDiverDT', label = 'Force ultrametricity',choices = NULL )
})
updateSelectInput(session = 'frcUltButtDiverDT', label = 'Force ultrametricity', c('Select' == 'selectDiverDT', 'Round decimals' == 'rounddiverDT', 'Chronos dating' == 'chronosDiverDt'))
}
})
runApp()
runApp()
observeEvent(ultrametricDiverDT() == F,{
output$forceultrDiverDT <- renderUI({
selectInput(inputId = 'frcUltButtDiverDT', label = 'Force ultrametricity',choices =
choices = c('Select' == 'selectDiverDT', 'Round decimals' == 'rounddiverDT', 'Chronos dating' == 'chronosDiverDt') )
runApp()
runApp()
