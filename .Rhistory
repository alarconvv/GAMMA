runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
plot(as.Qmatrix.corhmm(fit.marginal$vv[[1]],feed.mode))
plot(as.Qmatrix.corhmm(fit.marginal$vv[[1]],feed.mode))
plot(as.Qmatrix.corhmm(fit.marginal$vv[[2]],feed.mode))
plot(as.Qmatrix.corhmm(fit.marginal$vv[[3]],feed.mode))
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
fit.marginal$vv[[3]]$solution
Q<-x
as.Qmatrix.corhmm<-function(Q,level,...){
#Q<-x$solution
colnames(Q) <- levels(level)
row.names(Q) <- levels(level)
diag(Q)<--rowSums(Q,na.rm=TRUE)
class(Q)<-"Qmatrix"
Q
}
plot(as.Qmatrix.corhmm(fit.marginal$vv[[3]]$solution,feed.mode))
plot(as.Qmatrix.corhmm(fit.marginal$vv[[3]]$solution,feed.mode))
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
fit.joint.ARD1<-corHMM(eel.tree,eel.data,node.states="joint",
rate.cat=1,rate.mat=matrix(c(NA,1,2,NA),2,2))
fit.joint.irrever10<-corHMM(eel.tree,eel.data,node.states="joint",
rate.cat=1,rate.mat=matrix(c(NA,0,1,NA),2,2))
fit.joint.irrever01<-corHMM(eel.tree,eel.data,node.states="joint",
rate.cat=1,rate.mat=matrix(c(NA,1,0,NA),2,2))
fit.marginal$vv$irrever10<-corHMM(eel.tree,eel.data,node.states="marginal",
rate.cat=1,rate.mat=matrix(c(NA,0,1,NA),2,2))
fit.marginal$vv$irrever01<-corHMM(eel.tree,eel.data,node.states="marginal",
rate.cat=1,rate.mat=matrix(c(NA,1,0,NA),2,2),root.p=c(0.5,0.5))
fit.joint.irrever01<-corHMM(eel.tree,eel.data,node.states="joint",
rate.cat=1,rate.mat=matrix(c(NA,1,0,NA),2,2),root.p=c(0.5,0.5))
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
apply(fit.marginal$vv[[3]]$states,2, max)
apply(fit.marginal$vv[[3]]$states,1, max)
apply(fit.marginal$vv[[3]]$states,1, which.max)
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
tem <- fit.marginal$vv[[3]]$states
which.max(tem)
which.max(tem)
which.max(tem)
fit.marginal$vv[[3]]$states
apply(fit.marginal$vv[[3]]$states,1, which.max)
tem[,apply(fit.marginal$vv[[3]]$states,1, which.max)]
fit.marginal$vv[[3]]$states
apply(tem,1, which.max)
1:nrow(tem)
tem[1:nrow(tem),apply(tem,1, which.max)]
apply(tem,1, which.max)
tem
tem[1:nrow(tem),apply(tem,1, which.max)] <- 1
tem
tem <- fit.marginal$vv[[3]]$states
tem[,apply(tem,1, which.max)] <- 1
tem
apply(tem,1, which.max)
tem <- fit.marginal$vv[[3]]$states
apply(tem,1, which.max)
apply(tem,2, which.max)
lapply(tem, which.max)
tem <- fit.marginal$vv[[3]]$states
sapply(tem, which.max)
tem
tem <- fit.marginal$vv[[1]]$states
sapply(tem, which.max)
tem <- fit.marginal$vv[[2]]$states
tem
sapply(tem, which.max)
apply(tem,1, which.max)
nn <- apply(tem,1, which.max)
tem <- fit.marginal$vv[[2]]$states
nn <- apply(tem,1, which.max)
nn
temp[,c(1,2)] <- 0
tem[,c(1,2)] <- 0
tem
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
tem <- fit.marginal$vv[[2]]$solution
tem
which(tem == NA)
is.na(tem)
which(is.na(tem))
tem[which(is.na(tem))]
tem[which(is.na(tem))] <- 0
tem
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
x <- fit.marginal$vv[[2]]
Q<-x$solution
Q
Q[which(is.na(Q))] <- 0
Q
rowSums(Q,na.rm=TRUE)
-rowSums(Q,na.rm=TRUE)
diag(Q)<--rowSums(Q,na.rm=TRUE)
diag(Q)
Q
Q<-x$solution
rowSums(Q,na.rm=TRUE)
-apply(Q,1,sum)
Q<-x$solution
Q[which(is.na(Q))] <- 0
apply(Q,1,sum)
-apply(Q,1,sum)
diag(Q)<--apply(Q,1,sum)
class(Q)<-"Qmatrix"
colnames(Q) <- levels(level)
Q
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
fit.marginal$vv
str(fit.marginal$vv)
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
joint
fit.joint <- list()
fit.joint$vv <-list()
fit.joint$vv$ER<-corHMM(eel.tree,eel.data,node.states="joint",
rate.cat=1,rate.mat=matrix(c(NA,1,1,NA),2,2))
fit.joint$vv$ARD1<-corHMM(eel.tree,eel.data,node.states="joint",
rate.cat=1,rate.mat=matrix(c(NA,1,2,NA),2,2))
fit.joint$vv$irrever10<-corHMM(eel.tree,eel.data,node.states="joint",
rate.cat=1,rate.mat=matrix(c(NA,0,1,NA),2,2))
fit.joint$vv$irrever01<-corHMM(eel.tree,eel.data,node.states="joint",
rate.cat=1,rate.mat=matrix(c(NA,1,0,NA),2,2),root.p=c(0.5,0.5))
fit.joint$vv
str(fit.joint$vv)
str(fit.joint$vv$ER)
fit.joint$vv$ER$states
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
as.Qmatrix.corhmm<-function(x,level,...){
Q<-x$solution
Q[which(is.na(Q))] <- 0
diag(Q)<--rowSums(Q,na.rm=TRUE)
class(Q)<-"Qmatrix"
colnames(Q) <- levels(level)
row.names(Q) <- levels(level)
Q
}
fit.marginal
str(fit.marginal$vv)
fit.marginal$vv[1]
fit.marginal$vv[[1]]
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
fit.joint$vv
str(fit.joint$vv$ER)
to.matrix(fit.joint$vv$ER,1:2)
to.matrix(fit.joint$vv$ER$states,1:2)
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
BM <-anc.ML(tree, x1, maxit=20, model='BM')
tree <- readRDS("Documents/Paper.in.prep/Interface.gamma/GAMMA/data/anoletree.RDS")
data <-readRDS("Documents/Paper.in.prep/Interface.gamma/GAMMA/data/anole.data.RDS")
x1 <-setNames(data$SVL,row.names(data))
BM <-anc.ML(tree, x1, maxit=20, model='BM')
BM
BM$ace
map <-contMap(tree, x,method='user', anc.states= c(x1,v$Models$BM$ace) )
x1
map <-contMap(tree, x1,method='user', anc.states= c(x1,v$Models$BM$ace) )
tree <- readRDS("Documents/Paper.in.prep/Interface.gamma/GAMMA/data/anoletree.RDS")
c(x1,v$Models$BM$ace)
map <-contMap(tree, x1,method='user', anc.states= c(x1,v$Models$BM$ace) )
v$Models$BM$ace
map <-contMap(tree, x1,method='user', anc.states= c(x1,BM$ace) )
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
shiny::runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
shiny::runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
mtree<-make.simmap(eel.tree,feed.mode,model="ER")
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
fit.joint$vv[[1]]
fit.joint$vv[[1]]$states
to.matrix(fit.joint$vv[[1]]$states)
to.matrix(c(0,1),fit.joint$vv[[1]]$states)
to.matrix(fit.joint$vv[[1]]$states,c(0,1))
m <- to.matrix(fit.joint$vv[[1]]$states,c(0,1))
row.names(m) < - fit.joint$vv[[1]]$states,c(0,1)
row.names(m) < - fit.joint$vv[[1]]$states
fit.joint$vv[[1]]$states
row.names(m)
m <- to.matrix(fit.joint$vv[[1]]$states,c(0,1))
m
row.names(m) < - fit.joint$vv[[1]]$states
row.names(m)
m
fit.joint$vv[[1]]$states
row.names(m) < - fit.joint$vv[[1]]$states
m <- to.matrix(fit.joint$vv[[1]]$states,c(1,0))
m
m
m <- to.matrix(fit.joint$vv[[1]]$states,1:2)
m <- to.matrix(fit.joint$vv[[1]]$states,1:2)
m
xx <-read.csv('Documents/Paper.in.prep/Interface.gamma/LibroLiam/Data-Example Book/with3states.csv',header = T,row.names=1)
which.max(c(1,3,3))
c(1,3,3)
which.max(c(1,4,3))
which.max(c(1,2,3))
which.max(c(5,2,3))
which.max(c(5,5,3))
max(c(5,5,3))
d <- c(5,5,3)
which(d == max(d))
data.frame('col1' = sample(c(1:5),10),'col2' = sample(c(1:5),10),'col3' = sample(c(1:5),10))
data.frame('col1' = sample(c(1:5),10,replace = T),'col2' = sample(c(1:5),10,replace = T),'col3' = sample(c(1:5),10,replace = T))
d <-data.frame('col1' = sample(c(1:5),10,replace = T),'col2' = sample(c(1:5),10,replace = T),'col3' = sample(c(1:5),10,replace = T))
nn <- apply(d,1, function(x) which(x == max(x)))
nn
d
nn <- apply(d,1, function(x) d[,which(x == max(x)) <- 1])
d[,which(x == max(x))]
nn <- apply(d,1, function(x) d[,which(x == max(x))] <-)
nn <- apply(d,1, function(x) d[,which(x == max(x))] <-1)
nn
d <-data.frame('col1' = sample(c(1:5),10,replace = T),'col2' = sample(c(1:5),10,replace = T),'col3' = sample(c(1:5),10,replace = T))
nn <- apply(d,1, function(x) d[,which(x == max(x))] <-1)
nn
d <-data.frame('col1' = sample(c(1:5),10,replace = T),'col2' = sample(c(1:5),10,replace = T),'col3' = sample(c(1:5),10,replace = T))
nn <- apply(d,1, function(x) d[,which(x == max(x))])
nn
d
nn <- lapply(d, function(x) d[,which(x == max(x))])
nn <- lapply(d, function(x) which(x == max(x)))
nn
nn <- sapply(d, function(x) which(x == max(x)))
nn
nn <- apply(d, 1,function(x) which(x == max(x)))
nn
d <-data.frame('col1' = sample(c(1:5),10,replace = T),'col2' = sample(c(1:5),10,replace = T),'col3' = sample(c(1:5),10,replace = T))
d
nn
nn[[1]]
nn[[3]]
for (i in 1:length(nn)) {
d[i,nn[[i]] <- 1
}
for (i in 1:length(nn)) {
d[i,nn[[i]]] <- 1
}
d
d <-data.frame('col1' = sample(c(1:5),10,replace = T),'col2' = sample(c(1:5),10,replace = T),'col3' = sample(c(1:5),10,replace = T))
ncol(d)
d[,1:ncol(d)] <- 0
d
for (i in 1:length(nn)) {
d[i,nn[[i]]] <- 1
}
d
nn
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
data <-read.csv("../LibroLiam/Data-Example Book/with3states.csv")
data <-read.csv("../LibroLiam/Data-Example Book/with3states.csv")
data <-read.csv("../LibroLiam/Data-Example Book/with3states.csv")
data <-read.csv("../LibroLiam/Data-Example Book/with3states.csv")
data <-read.csv("Documents/Paper.in.prep/Interface.gamma/LibroLiam/Data-Example Book/with3states.csv")
data
setNames(data$simul,eel.tree$tip.label)
data3states <- setNames(data$simul,eel.tree$tip.label)
eel.data<-data.frame(Genus_sp=names(data3states),
state3=as.numeric(data3states)-1)
fit.joint$vv$ER<-corHMM(eel.tree,eel.data,node.states="joint",
rate.cat=1,rate.mat=matrix(c(NA,1,1,NA),2,2))
matrix(c(NA,1,1,NA),3,3)
fit.joint$vv$ER<-corHMM(eel.tree,eel.data,node.states="joint",
rate.cat=1,rate.mat=matrix(c(NA,1,1,1,NA,1,1,1,NA),3,3))
fit.joint$vv$ER
fit.joint$vv$ER$states
levels(data3states)
data3states
Genus_sp=names(data3states)
as.numeric(data3states)
to.matrix(fit.joint$vv$ER$states,1:length(levels(as.factor(data3states))))
fit.joint$vv$ER$states
to.matrix(fit.joint$vv$ER$states,1:length(levels(as.factor(data3states))))
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
shiny::runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
shiny::runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp()
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
runApp('Documents/Paper.in.prep/Interface.gamma/GAMMA')
setwd("~/Documents/Paper.in.prep/Interface.gamma/GAMMA")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
mtree<-make.simmap(eel.tree,feed.mode,model="ER")
## plot single stochastic map
plot(mtree,cols,fsize=0.4,ftype="i",lwd=2,offset=0.4,
ylim=c(-1,Ntip(eel.tree)))
## add legend
legend("bottomleft",legend=levels(feed.mode),pch=22,
pt.cex=1.5,pt.bg=cols,bty="n",cex=0.8)
mtree<-make.simmap(eel.tree,feed.mode,model="ARD")
mtree
mtree<-make.simmap(eel.tree,feed.mode,model=matrix(c(NA,1,0,NA),2,2))
feed.mode
mtree<-make.simmap(eel.tree,feed.mode,model=matrix(c(NA,1,0,NA),2,2))
mtree<-make.simmap(eel.tree,feed.mode, model= 'ARD')
mtree
mtree<-make.simmap(eel.tree,feed.mode, model= 'SYM')
make.simmap
matrix(c(0,0,1,0),2,2,byrow=TRUE)
## plot single stochastic map
plot(mtree,cols,fsize=0.4,ftype="i",lwd=2,offset=0.4,
ylim=c(-1,Ntip(eel.tree)))
runApp()
actionButton('AddModelDisBI','Add model')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
AncDiscreteBI$matrix0 <- reactive(matrix(data = as.integer(0), nrow = nStatesBI()[1], ncol = nStatesBI()[1],
dimnames = list(levels(SelectedVarDisc()),levels(SelectedVarDisc()))))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
observeEvent(input$SubmAddModelBI == 1, {
# Submit new model
#
if (input$SubmAddModelBI == 1) {
AncDiscreteBI$modelMatrixBI <- hot_to_r(input$costuModelBI) # get values from costumizable table
# Name new model
names(AncDiscreteBI$modelMatrixBI) <- 'UserModel'
}
})
runApp()
runApp()
runApp()
runApp()
observeEvent(input$SubmAddModelBI > 0, {
# Submit new model
#
if (!is.null(input$costuModelBI)) {
AncDiscreteBI$modelMatrixBI <- hot_to_r(input$costuModelBI) # get values from costumizable table
# Name new model
names(AncDiscreteBI$modelMatrixBI) <- 'UserModel'}
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# # Submit new model
AncDiscreteBI$modelMatrixBI <- hot_to_r(input$costuModelBI) # get values from costumizable table
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
