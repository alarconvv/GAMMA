############# YULE #############
yule <-make.yule(tree = tree,sampling.f = 0.9,unresolved = NULL)
fityule <- find.mle(func = yule, x.init=0.1, method="optim")
<- find.mle(func = yule, x.init=0.1, method="optim")
fityule
############# YULE #############
yule <-make.bd(tree = tree,sampling.f = 0.9,unresolved = NULL)
fityule <- find.mle(func = yule, x.init=0.1, method="optim")
fityule <- find.mle(func = yule, x.init=c(0.1,0), method="optim")
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('exp.t', 'constant.t'))
fityule <- find.mle(func = yule, x.init=c(0.01,0), method="subplex")
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('linear.t', 'constant.t'))
fityule <- find.mle(func = yule, x.init=c(0.01,0.01,0), method="subplex")
yule
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('linear.t', 'constant.t'))
fityule <- find.mle(func = yule, x.init=c(0.01,0.01,0), method="subplex")
fityule
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('stepf.t', 'constant.t'))
fityule <- find.mle(func = yule, x.init=c(0.01,0.01,0.01,0.01,0), method="subplex")
fityule <- find.mle(func = yule, x.init=c(0.01,0.01,0), method="subplex")
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('spline.t', 'constant.t'))
library(phytools)
library(diversitree)
set.seed(1)
tree <- read.newick('Documents/Guane/data/Cetacea.phy')
tree
bd <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('constant.t', 'constant.t'))
fitbd <- find.mle(func = bd, x.init=c(0.1,0.01), method="subplex")
t<-seq(0,round(max(branching.times(phy = tree)),1),length.out=100)
b <- 0.1
b<-rep(b ,length(t))
d <- 0.01
d<-rep(d ,length(t))
plot(t,b,type="l",col="black",lwd=3,
ylim=c(0,max(b,d)*1.5),xlab="time",
ylab=expression('Lambda'))
lines(t,d,col="lightgrey",lwd=3)
mtext("a)",line=1,adj=0)
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c("constant.t","exp.t"))
fityule <- find.mle(func = yule, x.init=c(0.1,0.01,0.01), method="minqa")
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c("constant.t","stepf.t"))
fityule <- find.mle(func = yule, x.init=c(0.1,0.01,0.01,0.01), method="subplex")
fityule
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c("constant.t","spline.t"))
fityule <- find.mle(func = yule, x.init=c(0.1,0.01,0.01), method="subplex")
## Then, with a simple fit through this.
x <- seq(0, round(max(branching.times(phy = tree)),1), length.out=101)
x
y <- sin(x/t.max*2*pi)
y <- sin(x/round(max(branching.times(phy = tree)),1)*2*pi)
y
spline.data
spline.data <- list(t=x, y=y)
spline.data
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c("constant.t","spline.t"),spline.data = spline.data)
## Then, with a simple fit through this.
x <- seq(0, max(branching.times(phy = tree)), length.out=101)
y <- sin(x/max(branching.times(phy = tree))*2*pi)
spline.data <- list(t=x, y=y)
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c("constant.t","spline.t"),spline.data = spline.data)
fityule <- find.mle(func = yule, x.init=c(0.1,0.01,0.01), method="subplex")
yule
x
y <- sin(x/max(branching.times(phy = tree))*2*pi)
y
spline.data <- list(t=x, y=y)
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c("constant.t","spline.t"),spline.data = spline.data)
fityule <- find.mle(func = yule, x.init=c(0.1,0.01,0.01), method="subplex")
shiny::runApp('Documents/Guane')
runApp('Documents/Guane')
bd <-make.bd(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('constant.t', 'constant.t'))
bd <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('constant.t', 'constant.t'))
fitbd <- find.mle(func = bd, x.init=c(0.1,0.01), method="subplex")
fitbd
exp(-0.01*0.1)
t
t<-seq(0,round(max(branching.times(phy = tree)),1),length.out=100)
l=1
a=-0.05
b<-rep(3,length(t))
d<-l*exp(-a*t)
## plot curve
plot(t,b,type="l",col="black",lwd=3,ylim=c(0,5),
xlab="time",
ylab=expression(paste("rate (",lambda," or ",mu,")")))
lines(t,d,col="lightgrey",lwd=3)
mtext("c)",line=1,adj=0)
b<-rep(0,length(t))
b
spvar <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('exp.t', 'constant.t'))
fitexp <- find.mle(func = sp, x.init=c(0.01,0.01,0), method="subplex")
fitexp <- find.mle(func = spvar, x.init=c(0.01,0.01,0), method="subplex")
spvar <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('exp.t', 'constant.t'))
fitexp <- find.mle(func = spvar, x.init=c(0.01,0.01,0.1), method="subplex")
t<-seq(0,round(max(branching.times(phy = tree)),1),length.out=100)
l=0.01
a=-0.01
b<-l*exp(-a*t)
d<-rep(0.1,length(t))
## plot curve
plot(t,b,type="l",col="black",lwd=3,ylim=c(0,5),
xlab="time",
ylab=expression(paste("rate (",lambda," or ",mu,")")))
lines(t,d,col="lightgrey",lwd=3)
mtext("c)",line=1,adj=0)
plot(t,b,type="l",col="black",lwd=3,ylim=c(0,max(b,d)),
xlab="time",
ylab=expression(paste("rate (",lambda," or ",mu,")")))
lines(t,d,col="lightgrey",lwd=3)
mtext("c)",line=1,adj=0)
## Then, with a simple fit through this.
x <- seq(0, max(branching.times(phy = tree)), length.out=101)
x
## Then, with a simple fit through this.
x <- seq(0, max(branching.times(phy = tree)), length.out=5)
y <- sin(x/max(branching.times(phy = tree))*2*pi)
spline.data <- list(t=x, y=y)
yule <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c("constant.t","spline.t"),spline.data = spline.data)
fityule <- find.mle(func = yule, x.init=c(0.1,0.01,0.01), method="subplex")
yule
set.seed(1)
tree <- read.newick('Documents/Guane/data/Cetacea.phy')
library(phytools)
library(diversitree)
set.seed(1)
tree <- read.newick('Documents/Guane/data/Cetacea.phy')
tree
spvar <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('stepf.t', 'constant.t'))
fitexp <- find.mle(func = spvar, x.init=c(0.01,0.01,1,0.1), method="minqa",control = list(optim.method= "newoua"))
fitexp
spvar <-make.bd.t(tree = tree,sampling.f = 0.9,unresolved = NULL,
functions=c('sigmoid.t', 'constant.t'))
fitexp <- find.mle(func = spvar, x.init=c(0.01,0.01,1,0.1,0.1), method="minqa",control = list(optim.method= "newoua"))
shiny::runApp('Documents/Guane')
runApp('Documents/Guane')
options(shiny.fullstacktrace = T)
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
shiny::runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
options(shiny.fullstacktrace = T)
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
shiny::runApp('Documents/Guane')
runApp('Documents/Guane')
options(shiny.fullstack=T)
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
library(DDD)
tree <- read.newick('Documents/Guane/data/Cetacea.phy')
cbt<-branching.times(tree)
cbt
bd_res_ddd<-bd_ML(brts=cbt,missnumspec=2,cond=1)
bd_res_ddd<-bd_ML(brts=cbt,missnumspec=2,cond=1)
bdvar_res_ddd<-bd_ML(brts=cbt,missnumspec=2,cond=1,
tdmodel=1,initparsopt=c(0.1,0.1,0.1,0.1),
idparsopt=1:4,btorph=0)
dd_res_ddd<-dd_ML(brts=cbt,missnumspec=2,cond=1,
btorph=0)
shiny::runApp('Documents/Guane')
library(DDD)
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
shiny::runApp('Documents/Guane')
runApp('Documents/Guane')
prueba
prueba <- list()
prueba$pruebas <-list()
prueba$pruebass <- list()
prueba$pruebas$p1 <- list()
prueba$pruebas$p2 <- list()
prueba$pruebas$pu1 <- list()
prueba$pruebas$pu2 <- list()
prueba
names(prueba)
lapply(prueba[1], names)
runApp('Documents/Guane')
prueba <- list()
prueba$pruebas <-list()
prueba$pruebass <- list()
prueba$pruebas$p1 <- list()
prueba$pruebas$p2 <- list()
prueba$pruebas$p1$t1 <- list()
prueba$pruebas$p2$t2 <- list()
prueba$pruebas$pu1 <- list()
prueba$pruebas$pu2 <- list()
prueba$pruebas$pu1$t3 <- list()
prueba$pruebas$pu2$t4 <- list()
prueba
lapply(prueba[1], names)
lapply(prueba[[1]], names)
runApp('Documents/Guane')
runApp('Documents/Guane')
lapply(prueba[[1]], names)
lapply(prueba[1], names)
lapply(prueba[1][1], names)
lapply(prueba[1][[1]], names)
sdapply(prueba[1][[1]], names)
ldapply(prueba[[1]], names)
lapply(prueba[[1]], names)
c(lapply(prueba[[1]], names))
c(sapply(prueba[[1]], names))
sapply(prueba[[1]], names)
c(lapply(prueba[[1]], names))
runApp('Documents/Guane')
c(lapply(prueba[[1]], names))
c(vapply(prueba[[1]], names))
c(sapply(prueba[[1]], names))
c(sapply(prueba[[1]], names)[1])
cat(sapply(prueba[[1]], names))
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
cat(sapply(prueba[[1]], names))
c(sapply(prueba[[1]], names))
c(sapply(prueba[1][[1]], names))
sapply(prueba[1][1], names)
sapply(prueba[1][1][1], names)
sapply(prueba[1][1][[1]], names)
sapply(prueba[1][[1]], names)
sapply(prueba[1][1][[1]], names)
sapply(prueba[1][1], names)
sapply(prueba[1][1][1], names)
c(sapply(prueba[1][1], names))
runApp('Documents/Guane')
runApp('Documents/Guane')
c(sapply(prueba[1][1], names))
c(sapply(prueba[1][[1]], names))
c(sapply(prueba[1][1][[1]], names))
prueba$pruebas$pu1$t3$rho <- list()
prueba$pruebas$pu1$t3$rate <- list()
prueba$pruebas$pu2$t4$rho <- list()
prueba$pruebas$pu2$t4$rate <- list()
prueba
c(sapply(prueba[1][1][[1]], names))
prueba[1][1][[1]]
c(sapply(prueba[1][[1]][[1]], names))
c(sapply(prueba[1][[1]], names))
cat(sapply(prueba[1][[1]], names))
as.character(cat(sapply(prueba[1][[1]], names)))
as.character(c(sapply(prueba[1][[1]], names)))
runApp('Documents/Guane')
runApp('Documents/Guane')
DiverModML$modelList <- list()
runApp('Documents/Guane')
prueba
prueba <- list()
prueba <- 'l'
prueba <- 'c'
prueba
prueba <- list()
prueba <- 'l'
prueba <- c(prueba, 'c')
prueba
DiverModML$modelList <- c(DiverModML$modelList,paste('BD',DiverModML$countBD, sep = ''))
runApp('Documents/Guane')
prueba <- list()
prueba$pruebas <-list()
prueba$pruebas$p1 <- list()
prueba$pruebas$p2 <- list()
prueba$pruebas$p1$t1 <- list()
prueba$pruebas$p2$t2 <- list()
prueba$pruebas$pu1 <- list()
prueba$pruebas$pu2 <- list()
prueba$pruebas$pu1$t3$rho <- list()
prueba$pruebas$pu1$t3$rate <- list()
prueba$pruebas$pu2$t4$rho <- list()
prueba$pruebas$pu2$t4$rate <- list()
prueba
grep('t3',prueba)
grepl('t3',prueba)
regexpr('t3',prueba)
prueba
gregexpr('t3',prueba)
which(prueba == 't3')
prueba[1] == 't2'
prueba[1]
prueba[[1]] == 't2'
which(prueba[[1]] == 't2')
prueba[[1]] %in%'t2'
prueba[[1]] %in% t2
names(prueba[[1]]) %in% 't2'
names(prueba[[1]])
prueba
prueba[1]
prueba[[1]]
names(prueba[[1]]) %in% 't2'
names(prueba[[1]][1])
names(prueba[[1]][1])
names(prueba[[1]][1]) %in% 't1'
names(prueba[[1]][1])
names(prueba[[1]][[1]])
names(prueba[[1]][[1]]) %in% 't1'
sapply(prueba[[1]][[1]], names)
prueba[[1]][[1]]
prueba
prueba[[1]][[1]]
sapply(prueba[[1]][[1]], names)
sapply(prueba[[1]][1], names)
as.character(c(sapply(prueba[[1]][1], names)))
prueba
sapply(prueba[1][[1]], names)
sapply(prueba[1][1], names)
names(prueba[1][1])
prueba[1][1]
names(prueba[1][1])
sapply(prueba[1][1], names)
sapply(prueba[1][1], names)) %in% 'p2'
sapply(prueba[1][1], names) %in% 'p2'
which(sapply(prueba[1][1], names) %in% 'p2')
pruebas[2]
pruebas
prueba[2]
prueba
prueba[[2]]
prueba[[1]]
prueba[[1]][2]
prueba
prueba[1]
prueba[1][1]
runApp('Documents/Guane')
which(sapply(prueba[1][1], names) %in% 'p2')
prueba[[1]][2]
prueba
runApp('Documents/Guane')
runApp('Documents/Guane')
runApp('Documents/Guane')
shiny::runApp('Documents/Guane')
runApp('Documents/Guane')
force.ultrametric()
pl.tree
nodes
library(phytools)
library(phangorn)
data("Laurasiatherian")
str(Laurasiatherian)
mp.tree<-pratchet(Laurasiatherian)
mp.tree$edge.length<-runif(n=nrow(mp.tree$edge))
lik.model<-pml(mp.tree,Laurasiatherian,k=4)
ml.fit<-optim.pml(lik.model,optGamma=TRUE,optBf=TRUE,optQ=TRUE,
rearrangement="ratchet")
ml.tree<-root(ml.fit$tree,outgroup="Platypus")
ml.tree<-drop.tip(ml.tree,"Platypus")
plotTree(ml.tree)
nodes<-c(findMRCA(ml.tree,c("Possum","Cat")),
findMRCA(ml.tree,c("Squirrel","Mouse")),
findMRCA(ml.tree,c("Pig","BlueWhale")),
findMRCA(ml.tree,c("Human","Baboon")),
findMRCA(ml.tree,c("Horse","Donkey")))
nodes<-c(findMRCA(ml.tree,c("Possum","Cat")),
findMRCA(ml.tree,c("Squirrel","Mouse")),
findMRCA(ml.tree,c("Pig","BlueWhale")),
findMRCA(ml.tree,c("Human","Baboon")),
findMRCA(ml.tree,c("Horse","Donkey")))
nodes
age.min=c(159,66,59,27.95,6.2)
age.max=c(166,75,66,31.35,10)
plotTree(ladderize(ml.tree))
obj<-get("last_plot.phylo",envir=.PlotPhyloEnv)
points(obj$xx[nodes],obj$yy[nodes],pch=21,bg=palette()[1:5],cex=2)
legend("bottomleft",paste("(",age.max,", ",age.min,") mya",sep=""),
pch=21,pt.bg=palette()[1:5],pt.cex=2,bty="n")
calibration<-makeChronosCalib(ml.tree,node=nodes,
age.min=age.min,age.max=age.max)
calibration
pl.tree<-chronos(ml.tree,calibration=calibration)
pl.tree
ml.tree
is.ultrametric(pl.tree)
is.ultrametric(ml.tree)
is.binary(pl.tree)
is.binary(ml.tree)
ml.tree2 <-CollapseNode(ml.tree, c(12, 13))
install.packages("TreeTools")
plotTree(ml.tree)
ml.tree2 <-CollapseNode(ml.tree, c(12, 13))
library(TreeTools)
ml.tree2 <-CollapseNode(ml.tree, c(12, 13))
ml.tree2 <-CollapseNode(ml.tree, c(90, 91))
plot(ml.tree2)
ml.tree2 <-CollapseNode(ml.tree, c(90, 91))
plot(ml.tree2)
plot(ml.tree)
is.binary(ml.tree2)
nodes<-c(findMRCA(ml.tree,c("Possum","Cat")),
findMRCA(ml.tree,c("Squirrel","Mouse")),
findMRCA(ml.tree,c("Pig","BlueWhale")),
findMRCA(ml.tree,c("Human","Baboon")),
findMRCA(ml.tree,c("Horse","Donkey")))
age.min=c(159,66,59,27.95,6.2)
age.max=c(166,75,66,31.35,10)
plotTree(ladderize(ml.tree2))
obj<-get("last_plot.phylo",envir=.PlotPhyloEnv)
points(obj$xx[nodes],obj$yy[nodes],pch=21,bg=palette()[1:5],cex=2)
legend("bottomleft",paste("(",age.max,", ",age.min,") mya",sep=""),
pch=21,pt.bg=palette()[1:5],pt.cex=2,bty="n")
calibration<-makeChronosCalib(ml.tree,node=nodes,
age.min=age.min,age.max=age.max)
calibration
pl.tree<-chronos(ml.tree,calibration=calibration,)
plot(pl.tree)
calibration<-makeChronosCalib(ml.tree2,node=nodes,
age.min=age.min,age.max=age.max)
calibration
pl.tree<-chronos(ml.tree2,calibration=calibration,)
plot(pl.tree)
is.ultrametric(pl.tree)
is.ultrametric(ml.tree2)
is.binary(ml.tree2)
pl.tree2 <- multi2di(pl.tree)
pl.tree2
plot(pl.tree2)
plot(pl.tree2)
plot(pl.tree)
pl.tree2 <- multi2di(pl.tree)
plot(pl.tree2)
is.ultrametric(pl.tree2)
is.binary(pl.tree2)
write.nexus(pl.tree,'Example.Ultrametric.nex')
write.tree( pl.tree,'Example.Ultrametric.nex')
write.tree( pl.tree,'Example.Ultrametric.phy')
nodes<-c(findMRCA(ml.tree,c("Possum","Cat")),
findMRCA(ml.tree,c("Squirrel","Mouse")),
findMRCA(ml.tree,c("Pig","BlueWhale")),
findMRCA(ml.tree,c("Human","Baboon")),
findMRCA(ml.tree,c("Horse","Donkey")))
age.min=c(159,66,59,27.95,6.2)
age.max=c(166,75,66,31.35,10)
plotTree(ladderize(ml.tree))
obj<-get("last_plot.phylo",envir=.PlotPhyloEnv)
points(obj$xx[nodes],obj$yy[nodes],pch=21,bg=palette()[1:5],cex=2)
legend("bottomleft",paste("(",age.max,", ",age.min,") mya",sep=""),
pch=21,pt.bg=palette()[1:5],pt.cex=2,bty="n")
calibration<-makeChronosCalib(ml.tree,node=nodes,
age.min=age.min,age.max=age.max)
calibration
pl.tree<-chronos(ml.tree,calibration=calibration,)
is.ultrametric(pl.tre
e)
is.ultrametric(pl.tree)
write.tree( pl.tree,'Example.Ultrametric.phy')
is.ultrametric(ml.tree2)
write.tree( ml.tree2,'Example.noUltrametric.phy')
is.binary(ml.tree2)
saveRDS(pl.tree, 'Documents/Guane/data/Example.Ultrametric.RDS')
saveRDS(ml.tree2, 'Documents/Guane/data/Example.noUltrametric.RDS')
setwd("~/Documents/Guane/data")
setwd("~/Documents/Guane")
runApp()
options(shiny.fullstack = T)
#Temporal object to print in info panel
# info: tree
observeEvent(input$importTree, {
DiverData$iterObjectDiver <- treeInputDiver()
})
runApp()
options(shiny.fullstack = T)
runApp()
# } else if (input$treeDiver == 'exampDivernonUltra') {
#readRDS(file = 'data/Example.noUltrametric.RDS')
} else if (input$treeDiver == 'treeFileDiver' ) {
runApp()
runApp()
options(shiny.fullstack = TRUE)
runApp()
